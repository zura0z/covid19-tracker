{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","index.js"],"names":["InfoBox","title","cases","isRed","active","total","props","Card","className","onClick","CardContent","Typography","color","casesTypeColors","rgba","hex","multiplier","recovered","deaths","sortData","data","sort","a","b","prettyPrintStat","stat","numeral","format","Map","countries","casesType","center","zoom","map","country","i","Circle","countryInfo","lat","long","fillColor","fillOpacity","radius","Math","sqrt","Popup","style","backgroundImage","flag","showCasesOnMap","showRecoveredOnMap","showDeathsOnMap","MapContainer","TileLayer","attribution","url","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","undefined","date","newDataPoint","x","y","push","LineGraph","days","useState","setData","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCounty","setCountyInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","setDays","res","name","iso2","sortedData","getCountriesData","onCountryChange","e","countryCode","target","FormControl","Select","variant","onChange","MenuItem","todayCases","todayRecovered","todayDeaths","charAt","toUpperCase","slice","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ecf090f8.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\r\n\r\nimport \"./InfoBox.css\";\r\n\r\nconst InfoBox = ({ title, cases, isRed, active, total, ...props }) => {\r\n  return (\r\n    <Card\r\n      className={`infoBox ${active && \"infoBox--selected\"} ${\r\n        isRed && \"infoBox--red\"\r\n      }`}\r\n      onClick={props.onClick}\r\n    >\r\n      <CardContent>\r\n        <Typography className=\"infoBox__title\" color=\"textSecondary\">\r\n          {title}\r\n        </Typography>\r\n        <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>\r\n          {cases}\r\n        </h2>\r\n        <Typography className=\"infoBox__total\" color=\"textSecondary\">\r\n          {total} Total\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default InfoBox;\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\nexport const casesTypeColors = {\r\n  cases: {\r\n    rgba: \"rgba(204,16,52, 0.7)\",\r\n    hex: \"#CC1034\",\r\n    multiplier: 300,\r\n  },\r\n  recovered: {\r\n    rgba: \"rgba(34,139,34, 0.7)\",\r\n    hex: \"#228B22\",\r\n    multiplier: 240,\r\n  },\r\n  deaths: {\r\n    rgba: \"rgba(0,0,0, 0.7)\",\r\n    hex: \"#000000\",\r\n    multiplier: 600,\r\n  },\r\n};\r\n\r\nexport const showCasesOnMap = (data, casesType) =>\r\n  data.map((country, i) => (\r\n    <Circle\r\n      key={i}\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      color={\"#CC1034\"}\r\n      fillColor={\"rgba(204,16,52, 0.7)\"}\r\n      fillOpacity={0.4}\r\n      radius={\r\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n      }\r\n    >\r\n      <Popup>\r\n        <div className=\"info-container\">\r\n          <div\r\n            className=\"info-flag\"\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n          ></div>\r\n          <div className=\"info-name\">{country.country}</div>\r\n          <div className=\"info\">\r\n            Cases: {numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info\">\r\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info\">\r\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ));\r\nexport const showRecoveredOnMap = (data, casesType) =>\r\n  data.map((country, i) => (\r\n    <Circle\r\n      key={i}\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      color={\"#228B22\"}\r\n      fillColor={\"rgba(34,139,34, 0.7)\"}\r\n      fillOpacity={0.4}\r\n      radius={\r\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n      }\r\n    >\r\n      <Popup>\r\n        <div className=\"info-container\">\r\n          <div\r\n            className=\"info-flag\"\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n          ></div>\r\n          <div className=\"info-name\">{country.country}</div>\r\n          <div className=\"info\">\r\n            Cases: {numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info\">\r\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info\">\r\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ));\r\nexport const showDeathsOnMap = (data, casesType) =>\r\n  data.map((country, i) => (\r\n    <Circle\r\n      key={i}\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      color={\"#000000\"}\r\n      fillColor={\"rgba(0,0,0, 0.7)\"}\r\n      fillOpacity={0.4}\r\n      radius={\r\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n      }\r\n    >\r\n      <Popup>\r\n        <div className=\"info-container\">\r\n          <div\r\n            className=\"info-flag\"\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n          ></div>\r\n          <div className=\"info-name\">{country.country}</div>\r\n          <div className=\"info\">\r\n            Cases: {numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info\">\r\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info\">\r\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ));\r\n\r\nexport const sortData = (data) => {\r\n  const sortedData = [...data];\r\n  return sortedData.sort((a, b) => (a.cases > b.cases ? -1 : 1));\r\n};\r\nexport const prettyPrintStat = (stat) =>\r\n  stat && stat >= 1000\r\n    ? `+${numeral(stat).format(\"0.0a\")}`\r\n    : stat && stat <= 1000\r\n    ? `${numeral(stat).format(\"0\")}`\r\n    : \"0\";\r\n","import React from \"react\";\r\nimport \"./Map.css\";\r\nimport { MapContainer, TileLayer } from \"react-leaflet\";\r\nimport { showCasesOnMap, showRecoveredOnMap, showDeathsOnMap } from \"./util\";\r\n\r\nconst Map = ({ countries, casesType, center, zoom }) => {\r\n  let cases = null;\r\n  let recovered = null;\r\n  let deaths = null;\r\n\r\n  if (casesType === \"cases\") {\r\n    cases = showCasesOnMap(countries, casesType);\r\n  }\r\n  if (casesType === \"recovered\") {\r\n    recovered = showRecoveredOnMap(countries, casesType);\r\n  }\r\n  if (casesType === \"deaths\") {\r\n    deaths = showDeathsOnMap(countries, casesType);\r\n  }\r\n  \r\n\r\n  return (\r\n    <div className=\"map\">\r\n      <MapContainer center={center} zoom={zoom}>\r\n        <TileLayer\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n        />\r\n        {cases}\r\n        {recovered}\r\n        {deaths}\r\n      </MapContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Map;\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\n\r\nimport \"./Table.css\";\r\n\r\nfunction Table({ countries }) {\r\n  return (\r\n    <div className=\"table\">\r\n      {countries.map(({ country, cases }) => (\r\n        <tr key={country}>\r\n          <td>{country}</td>\r\n          <strong>\r\n            <td>{numeral(cases).format(\"0,0\")}</td>\r\n          </strong>\r\n        </tr>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Table;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\nimport { casesTypeColors } from \"./util\";\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: false,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: 0,\r\n        },\r\n        ticks: {\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nconst buildChartData = (data, casesType) => {\r\n  let chartData = [];\r\n  let lastDataPoint;\r\n  if (data !== undefined) {\r\n    for (let date in data.cases) {\r\n      if (lastDataPoint) {\r\n        let newDataPoint = {\r\n          x: date,\r\n          y: data[casesType][date] - lastDataPoint,\r\n        };\r\n        chartData.push(newDataPoint);\r\n      }\r\n      lastDataPoint = data[casesType][date];\r\n    }\r\n  }\r\n  return chartData;\r\n};\r\n\r\nfunction LineGraph({ casesType, country, days }) {\r\n  const [data, setData] = useState({});\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      if (country === \"worldwide\") country = \"all\";\r\n      let url = `https://disease.sh/v3/covid-19/historical/${country}?lastdays=${days}`;\r\n      await fetch(url)\r\n        .then((response) => {\r\n          return response.json();\r\n        })\r\n        .then((data) => {\r\n          let chartData = null;\r\n          country === \"all\"\r\n            ? (chartData = buildChartData(data, casesType))\r\n            : (chartData = buildChartData(data[\"timeline\"], casesType));\r\n          setData(chartData);\r\n          buildChartData(chartData);\r\n        });\r\n    };\r\n    fetchData();\r\n  }, [casesType, country, days]);\r\n\r\n  return (\r\n    <div>\r\n      {data && data.length > 0 && (\r\n        <Line\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor: casesTypeColors[casesType].rgba,\r\n                borderColor: casesTypeColors[casesType].hex,\r\n                data: data,\r\n              },\r\n            ],\r\n          }}\r\n          options={options}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  MenuItem,\r\n  FormControl,\r\n  Select,\r\n  Card,\r\n  CardContent,\r\n} from \"@material-ui/core\";\r\nimport numeral from \"numeral\";\r\n\r\nimport InfoBox from \"./InfoBox\";\r\nimport Map from \"./Map\";\r\nimport Table from \"./Table\";\r\nimport { sortData, prettyPrintStat } from \"./util\";\r\nimport LineGraph from \"./LineGraph\";\r\nimport \"leaflet/dist/leaflet.css\";\r\n\r\nimport \"./App.css\";\r\n\r\nconst App = () => {\r\n  const [countries, setCountries] = useState([]);\r\n  const [country, setCounty] = useState(\"worldwide\");\r\n  const [countryInfo, setCountyInfo] = useState({});\r\n  const [tableData, setTableData] = useState([]);\r\n  const [mapCenter, setMapCenter] = useState({ lat: 40, lng: 20 });\r\n  const [mapZoom, setMapZoom] = useState(3);\r\n  const [mapCountries, setMapCountries] = useState([]);\r\n  const [casesType, setCasesType] = useState(\"cases\");\r\n  const [days, setDays] = useState(150);\r\n\r\n  useEffect(() => {\r\n    fetch(\"https://disease.sh/v3/covid-19/all\")\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        setCountyInfo(data);\r\n      });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const getCountriesData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          const countries = data.map((country) => ({\r\n            name: country.country,\r\n            value: country.countryInfo.iso2,\r\n          }));\r\n\r\n          const sortedData = sortData(data);\r\n          setTableData(sortedData);\r\n          setMapCountries(data);\r\n          setCountries(countries);\r\n        });\r\n    };\r\n    getCountriesData();\r\n  }, []);\r\n\r\n  const onCountryChange = async (e) => {\r\n    const countryCode = e.target.value;\r\n\r\n    const url =\r\n      countryCode === \"worldwide\"\r\n        ? \"https://disease.sh/v3/covid-19/all\"\r\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\r\n\r\n    await fetch(url)\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        setCounty(countryCode);\r\n        setCountyInfo(data);\r\n        if (data.countryInfo !== undefined) {\r\n          setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\r\n          setMapZoom(5);\r\n        }\r\n      });\r\n  };\r\n  const daysChange = (e) => {\r\n    setDays(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <div className=\"app__left\">\r\n        <div className=\"app__header\">\r\n          <h1 className=\"title\">COVID-19 Tracker</h1>\r\n          <FormControl className=\"app__dropdown\">\r\n            <Select\r\n              className=\"select\"\r\n              variant=\"outlined\"\r\n              onChange={onCountryChange}\r\n              value={country}\r\n            >\r\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\r\n              {countries.map((country, i) => (\r\n                <MenuItem key={i} value={country.value}>\r\n                  {country.name}\r\n                </MenuItem>\r\n              ))}\r\n            </Select>\r\n          </FormControl>\r\n        </div>\r\n        <div className=\"app__stats\">\r\n          <InfoBox\r\n            isRed\r\n            active={casesType === \"cases\"}\r\n            onClick={(e) => setCasesType(\"cases\")}\r\n            title=\"COVID-19 Cases\"\r\n            cases={prettyPrintStat(countryInfo.todayCases)}\r\n            total={numeral(countryInfo.cases).format(\"0,0\")}\r\n          />\r\n          <InfoBox\r\n            active={casesType === \"recovered\"}\r\n            onClick={(e) => setCasesType(\"recovered\")}\r\n            title=\"Recovered\"\r\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\r\n            total={numeral(countryInfo.recovered).format(\"0,0\")}\r\n          />\r\n          <InfoBox\r\n            isRed\r\n            active={casesType === \"deaths\"}\r\n            onClick={(e) => setCasesType(\"deaths\")}\r\n            title=\"Deaths\"\r\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\r\n            total={numeral(countryInfo.deaths).format(\"0,0\")}\r\n          />\r\n        </div>\r\n        <Map\r\n          casesType={casesType}\r\n          countries={mapCountries}\r\n          center={mapCenter}\r\n          zoom={mapZoom}\r\n        />\r\n      </div>\r\n      <Card className=\"app__right\">\r\n        <CardContent>\r\n          <div className=\"app__table\">\r\n            <h3>Live Cases by Country</h3>\r\n            <Table countries={tableData} />\r\n          </div>\r\n          <div>\r\n            <h3 className=\"new_cases\">\r\n              {`${country.charAt(0).toUpperCase() + country.slice(1)} New ${\r\n                casesType.charAt(0).toUpperCase() + casesType.slice(1)\r\n              } In Last `}\r\n              <input\r\n                className=\"days_input\"\r\n                type=\"number\"\r\n                onChange={daysChange}\r\n                value={days}\r\n              />{\" \"}\r\n              Days\r\n            </h3>\r\n            <LineGraph\r\n              className=\"lineGraph\"\r\n              casesType={casesType}\r\n              country={country}\r\n              days={days}\r\n            />\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}